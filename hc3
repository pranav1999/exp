pip install connexion[swagger-ui] flask_sqlalchemy flask_marshmallow
------------------------------------------------------------------------
openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Flask CRUD API"
  description: "API documentation for Flask CRUD operations"
servers:
  - url: "http://localhost:5000"
paths:
  /items:
    get:
      summary: "Get all items"
      x-openapi-router-controller: "controllers.item_controller"
      operationId: "get_all_items"
      responses:
        200:
          description: "A list of items"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Item"
    post:
      summary: "Create a new item"
      x-openapi-router-controller: "controllers.item_controller"
      operationId: "create_item"
      requestBody:
        description: "Item to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        201:
          description: "Item created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
  /items/{item_id}:
    get:
      summary: "Get an item by ID"
      x-openapi-router-controller: "controllers.item_controller"
      operationId: "get_item_by_id"
      parameters:
        - in: "path"
          name: "item_id"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "An item object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        404:
          description: "Item not found"
    put:
      summary: "Update an item by ID"
      x-openapi-router-controller: "controllers.item_controller"
      operationId: "update_item"
      parameters:
        - in: "path"
          name: "item_id"
          required: true
          schema:
            type: "integer"
      requestBody:
        description: "Item to update"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        200:
          description: "Item updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        404:
          description: "Item not found"
    delete:
      summary: "Delete an item by ID"
      x-openapi-router-controller: "controllers.item_controller"
      operationId: "delete_item"
      parameters:
        - in: "path"
          name: "item_id"
          required: true
          schema:
            type: "integer"
      responses:
        204:
          description: "Item deleted"
        404:
          description: "Item not found"
components:
  schemas:
    Item:
      type: "object"
      required:
        - name
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        description:
          type: "string"
-----------------------------------------------------------------------------
import os
import connexion
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow

# Initialize the Flask application with Connexion
app = connexion.App(__name__, specification_dir='./openapi')

# Configure the app
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
app.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(BASE_DIR, 'database.db')
app.app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize the app components
db = SQLAlchemy(app.app)
ma = Marshmallow(app.app)

# Add the API specification
app.add_api('openapi.yaml')

if __name__ == '__main__':
    app.run(debug=True)
--------------------------------------------------------------------------------------------------------------
from app import db

class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    description = db.Column(db.String(200))

    def __repr__(self):
        return f'<Item {self.name}>'
-----------------------------------------------------------------------------------------
from app import ma
from models import Item

class ItemSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Item

item_schema = ItemSchema()
items_schema = ItemSchema(many=True)
-----------------------------------------------------------------------------------------------------------
from flask import jsonify, request
from app import db
from models import Item
from schemas import item_schema, items_schema

def get_all_items():
    items = Item.query.all()
    return jsonify(items_schema.dump(items))

def get_item_by_id(item_id):
    item = Item.query.get_or_404(item_id)
    return item_schema.dump(item)

def create_item():
    data = request.get_json()
    new_item = Item(name=data['name'], description=data.get('description'))
    db.session.add(new_item)
    db.session.commit()
    return item_schema.dump(new_item), 201

def update_item(item_id):
    item = Item.query.get_or_404(item_id)
    data = request.get_json()
    item.name = data['name']
    item.description = data.get('description')
    db.session.commit()
    return item_schema.dump(item)

def delete_item(item_id):
    item = Item.query.get_or_404(item_id)
    db.session.delete(item)
    db.session.commit()
    return '', 204
---------------------------------------------------------------------------------------------
from app import app, db

print("Initializing the database...")

with app.app.app_context():
    db.create_all()
    print("Database tables created.")

print("Initialization complete.")
--------------------------------------------------------------------------------------------------
  flask_app/
├── app.py
├── init_db.py
├── models.py
├── controllers/
│   └── item_controller.py
├── openapi/
│   └── openapi.yaml
├── schemas.py
└── database.db

