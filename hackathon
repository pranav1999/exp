pip install Flask flask-restful flask-sqlalchemy flask-marshmallow marshmallow-sqlalchemy flask-swagger-ui


from flask import Flask
from flask_restful import Api
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db = SQLAlchemy(app)
ma = Marshmallow(app)
api = Api(app)

from resources import ItemResource, ItemListResource

api.add_resource(ItemResource, '/items/<int:item_id>')
api.add_resource(ItemListResource, '/items')

if __name__ == '__main__':
    app.run(debug=True)

------------------------------------------------------------------------
from app import db

class Item(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    description = db.Column(db.String(200))

    def __repr__(self):
        return f'<Item {self.name}>'



-----------------------------------------------------------
from app import ma
from models import Item

class ItemSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Item

item_schema = ItemSchema()
items_schema = ItemSchema(many=True)


from flask_restful import Resource, reqparse
from app import db
from models import Item
from schemas import item_schema, items_schema

parser = reqparse.RequestParser()
parser.add_argument('name', type=str, required=True, help='Name is required')
parser.add_argument('description', type=str)

class ItemResource(Resource):
    def get(self, item_id):
        item = Item.query.get_or_404(item_id)
        return item_schema.dump(item)

    def put(self, item_id):
        data = parser.parse_args()
        item = Item.query.get_or_404(item_id)
        item.name = data['name']
        item.description = data['description']
        db.session.commit()
        return item_schema.dump(item)

    def delete(self, item_id):
        item = Item.query.get_or_404(item_id)
        db.session.delete(item)
        db.session.commit()
        return '', 204

class ItemListResource(Resource):
    def get(self):
        items = Item.query.all()
        return items_schema.dump(items)

    def post(self):
        data = parser.parse_args()
        new_item = Item(name=data['name'], description=data['description'])
        db.session.add(new_item)
        db.session.commit()
        return item_schema.dump(new_item), 201

---------------------------------------------------------------------------------------------
from flask_swagger_ui import get_swaggerui_blueprint
from app import app

SWAGGER_URL = '/swagger'
API_URL = '/static/swagger.yaml'

swaggerui_blueprint = get_swaggerui_blueprint(
    SWAGGER_URL,
    API_URL,
    config={ 
        'app_name': "Flask-CRUD-API"
    }
)

app.register_blueprint(swaggerui_blueprint, url_prefix=SWAGGER_URL)

-------------------------------------------------------------------------------------------------
swagger: '2.0'
info:
  version: "1.0.0"
  title: "Flask CRUD API"
  description: "API documentation for Flask CRUD operations"
basePath: "/"
schemes:
  - "http"
paths:
  /items:
    get:
      summary: "Get all items"
      responses:
        200:
          description: "A list of items"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Item"
    post:
      summary: "Create a new item"
      parameters:
        - in: "body"
          name: "item"
          description: "Item to create"
          schema:
            $ref: "#/definitions/Item"
      responses:
        201:
          description: "Item created"
          schema:
            $ref: "#/definitions/Item"
  /items/{item_id}:
    get:
      summary: "Get an item by ID"
      parameters:
        - in: "path"
          name: "item_id"
          type: "integer"
          required: true
      responses:
        200:
          description: "An item object"
          schema:
            $ref: "#/definitions/Item"
        404:
          description: "Item not found"
    put:
      summary: "Update an item by ID"
      parameters:
        - in: "path"
          name: "item_id"
          type: "integer"
          required: true
        - in: "body"
          name: "item"
          description: "Item to update"
          schema:
            $ref: "#/definitions/Item"
      responses:
        200:
          description: "Item updated"
          schema:
            $ref: "#/definitions/Item"
        404:
          description: "Item not found"
    delete:
      summary: "Delete an item by ID"
      parameters:
        - in: "path"
          name: "item_id"
          type: "integer"
          required: true
      responses:
        204:
          description: "Item deleted"
        404:
          description: "Item not found"
definitions:
  Item:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"

